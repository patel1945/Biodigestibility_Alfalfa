# stagewise
rm(list = ls())
detach("package:base", unload = TRUE)
library(base)
install.packages(c("augmentedRCBD", "bslib", "confintr", "countrycode", "curl", "deldir", "DescTools", "golem", "igraph", "inti", "jsonlite", "maptools", "Matrix", "matrixStats", "mice", "mvtnorm", "parallelly", "parameters", "performance", "plotly", "RcppArmadillo", "reticulate", "rmarkdown", "sp", "StanHeaders", "styler", "ucminf", "usethis"))
install.packages("Matrix")
library(scrime)
list.ia <- list(2,1,3,3,3,2,2)
list.snp <- list(1,10,20,30,40,50,60)
simulacao_1 <- simulateSNPglm(n.obs = 250, n.snp = 1000,list.ia = list.ia, list.snp = list.snp, beta0 = 0, beta = c(200,200,200,900,200,200,200) , maf = c(0.1, 0.4),err.fun=rnorm,sd=5,rand=123)
genotipo_sim1 <- as.data.frame(simulacao_1$x)
fenotipo_sim1 <- simulacao_1$y
vector_SNP1 <- c(1,10,20,30,40,50,60)
#Histogram of the phenotype
hist(fenotipo_sim1, col='gray', xlab="Simulated phenotype 1", ylab="Number of bulls", main="")
#Boxplot of the Phenotype
boxplot(fenotipo_sim1, ylab="Simulated phenotype 1")
#####Filter 1#####
#Function for calculating the Spearman correlation coefficient
teste.spearman <- function(genotipo, fenotipo){
p_value <- vector()
for (i in 1:ncol(genotipo))
{
p_value[i] <- cor.test(genotipo[,i],fenotipo, method="spearm",exact=FALSE)$p.value
}
return(p_value)
}
Pvec_sim1 <- vector()
Pvec_sim1 <- teste.spearman(genotipo_sim1,fenotipo_sim1)
length(Pvec_sim1)
#Bonferroni corretion
PvecAdj_sim1 <- p.adjust(Pvec_sim1,method="bonferroni")
hist(PvecAdj_sim1)
length(PvecAdj_sim1)
names(Pvec_sim1) <- colnames(genotipo_sim1)
Pvec_sim1_sort <- Pvec_sim1[order(Pvec_sim1)]
View(Pvec_sim1_sort)
#Calculating the lowest p-value adjusted
min(PvecAdj_sim1)
#Calculating the SNP with the lowest p-value adjusted
names(genotipo_sim1)[which.min(PvecAdj_sim1)]
#Sorting increasingly SNPs by adjusted p-values
PvecAdj_sim1_sort <- PvecAdj_sim1[order(PvecAdj_sim1)]
View(PvecAdj_sim1_sort)
View(data_s_10_9_sim1)
View(data_s_0.60_sim1)
View(data_s_10_1_sim1)
#Separating the markers for interval adjusted p-value
data_s_10_9_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-9]])
data_s_10_8_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-8]])
data_s_10_7_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-7]])
data_s_10_6_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-6]])
data_s_10_5_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-5]])
data_s_10_4_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-4]])
data_s_10_3_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-3]])
data_s_10_2_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-2]])
data_s_10_1_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-1]])
data_s_0.20_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.20]])
data_s_0.30_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.30]])
data_s_0.40_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.40]])
data_s_0.50_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.50]])
data_s_0.60_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.60]])
data_s_0.70_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.70]])
data_s_0.80_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.80]])
data_s_0.90_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.90]])
modelo_correto_sim1 <- genotipo_sim1[,vector_SNP1]
#Creating dataframes for generation of ARFF files
data_s_10_9_sim1.arff<-as.data.frame(cbind(data_s_10_9_sim1,fenotipo_sim1))
data_s_10_8_sim1.arff<-as.data.frame(cbind(data_s_10_8_sim1,fenotipo_sim1))
data_s_10_7_sim1.arff<-as.data.frame(cbind(data_s_10_7_sim1,fenotipo_sim1))
data_s_10_6_sim1.arff<-as.data.frame(cbind(data_s_10_6_sim1,fenotipo_sim1))
data_s_10_5_sim1.arff<-as.data.frame(cbind(data_s_10_5_sim1,fenotipo_sim1))
data_s_10_4_sim1.arff<-as.data.frame(cbind(data_s_10_4_sim1,fenotipo_sim1))
data_s_10_3_sim1.arff<-as.data.frame(cbind(data_s_10_3_sim1,fenotipo_sim1))
data_s_10_2_sim1.arff<-as.data.frame(cbind(data_s_10_2_sim1,fenotipo_sim1))
data_s_10_1_sim1.arff<-as.data.frame(cbind(data_s_10_1_sim1,fenotipo_sim1))
data_s_0.20_sim1.arff<-as.data.frame(cbind(data_s_0.20_sim1,fenotipo_sim1))
data_s_0.30_sim1.arff<-as.data.frame(cbind(data_s_0.30_sim1,fenotipo_sim1))
data_s_0.40_sim1.arff<-as.data.frame(cbind(data_s_0.40_sim1,fenotipo_sim1))
data_s_0.50_sim1.arff<-as.data.frame(cbind(data_s_0.50_sim1,fenotipo_sim1))
data_s_0.60_sim1.arff<-as.data.frame(cbind(data_s_0.60_sim1,fenotipo_sim1))
data_s_0.70_sim1.arff<-as.data.frame(cbind(data_s_0.70_sim1,fenotipo_sim1))
data_s_0.80_sim1.arff<-as.data.frame(cbind(data_s_0.80_sim1,fenotipo_sim1))
data_s_0.90_sim1.arff<-as.data.frame(cbind(data_s_0.90_sim1,fenotipo_sim1))
data_completos_sim1.arff<-as.data.frame(cbind(genotipo_sim1,fenotipo_sim1))
modelo_correto_sim1.arff<-as.data.frame(cbind(modelo_correto_sim1,fenotipo_sim1))
#Loading the package RWeka
library(RWeka)
data_s_0.20_sim1_without_Bonferroni
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
library(ASRgwas)
remove.packages("ASRgwas")
library(ASRtriala)
remove.packages("ASRtriala")
library(AmesHousing)
library(rsample)      # data splitting
library(randomForest) # basic implementation
library(ranger)       # a faster implementation of randomForest
library(caret)        # an aggregator package for performing many machine learning models
library(h2o)          # an extremely fast java-based platform
# stagewise
rm(list = ls())
devtools::install_github("jendelman/GWASpoly", build_vignettes=FALSE)
install.packages("devtools")
devtools::install_github("jendelman/GWASpoly", build_vignettes=FALSE)
library(GWASpoly)
rm(list = ls())
library(GWASpoly)
library(ggplot2)
install.packages(c("updog","ldsep"))
library(updog)
library(ldsep)
library(StageWise)
devtools::install_github("jendelman/StageWise", build_vignettes=FALSE)
library(data.table)
library(tidyverse)
library(asremlPlus)
library(goeveg)
library(asreml)
##############
# To annotate markers
# load gene annotation Medicago sativa Zhongmu No1
load("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/i_5.2.8.RData")
i_5.2.8 <- i_5.2.8 %>% dplyr::select(1,3)
library(GWASpoly)
library(tidyverse)
library(vcfR)
library(sommer)
library(ggplot2)
##############
# To annotate markers
# load gene annotation Medicago sativa Zhongmu No1
load("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/i_5.2.8.RData")
i_5.2.8 <- i_5.2.8 %>% dplyr::select(1,3)
head(i_5.2.8)
library(asreml)
library(asreml)
library(sommer)
install.packages("sommer")
library(sommer)
rm(list = ls())
data("DT_example")
DT <- DT_example
A <- A_example
View(A)
View(DT)
str(DT)
ans1 <- mmec(Yield~1,
random= ~ Name + Env + Env:Name + Env:Block,
rcov= ~ units, nIters=3,
data=DT, verbose = FALSE)
summary(ans1)$varcomp
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
DT$idd <-DT$id; DT$ide <-DT$id ### look at the data
DT[1:5,1:5]
GT[1:5,1:5]
MP[1:5,1:5]
MP[1:5,1:3]
DT$idd
DT[1:5,1:5]
DT$id
DT$ide
DT[1:5,1:5]
View(DT)
DT <- DT_cpdata
dim(GT)
A <- A.mat(GT) # additive relationship matrix
D <- D.mat(GT) # dominance relationship matrix
E <- E.mat(GT) # epistatic relationship matrix
dim(A)
dim(D)
dim(E)
GT[1:5,1:5]
ans.ADE <- mmer(fixed = color~1,
random = ~ vsr(id,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = DT,
verbose = FALSE)
DT$idd <-DT$id
DT$ide <-DT$id ### look at the data
ans.ADE <- mmer(fixed = color~1,
random = ~ vsr(id,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = DT,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
(summary(ans.ADE)$varcomp)
?A.mat
library(AGHmatrix)
data(snp.pine)
dim(snp.pine)
snp.pine[1:5,1:5]
?Amatrix
Amat <- Amatrix(ped.sol, ploidy=4, w = 0.1)
data(ped.sol)
data(snp.sol)
Amat <- Amatrix(ped.sol, ploidy=4, w = 0.1)
dim(Amat)
dim(ped.sol)
dim(snp.sol)
G_Dominance <- Gmatrix(snp.sol, method="Endelman", ploidy=4)
dim(G_Dominance)
snp.sol[1:5,1:5]
D[1:5,1:5]
G_Dominance[1:5,1:5]
snp.sol[1:5,1:5]
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=snp.sol, maf=0.05, method="VanRaden")
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=snp.sol, maf=0.05, method="VanRaden", ploidy=4)
D[1:5,1:5]
G_Dominance[1:5,1:5]
G_VanRaden[1:5,1:5]
?AmatrixPolycross
devtools::install_github("rramadeu/AGHmatrix")
library(AGHmatrix)
?AmatrixPolycross
devtools::install_github("prmunoz/AGHmatrix")
library(AGHmatrix)
?AmatrixPolycross
remove.packages(AGHmatrix)
library(AGHmatrix)
?AmatrixPolyCross
?AmatrixPolyCross
?Amatrix
library(AGHmatrix)
?AmatrixPolyCross
devtools::install_github("rramadeu/AGHmatrix")
library(AGHmatrix)
?AmatrixPolyCross
?Amatrix
?Amatrix
library(tidyverse)
names1 <- c("A","A2","ADICP","aNDForm","Ash","B","B1","B2","C","CP","ER6","kd","NDICP","SP")
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[1])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data <- data %>% dplyr::select(1:3)
View(data)
data$trial <- paste0(data$trial, names1[1])
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[1])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data <- data %>% dplyr::select(1:3)
data$trial <- paste0(data$trial, "_",names1[1])
list.files
list.files(full.names = T)
data1 <- read.csv("Overall_predictions_2stage.csv")
View(data1)
hist(data1$predicted.value)
data1 <- data1 %>% dplyr::select(1:2)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
View(data)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[1])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
View(data)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[1])
View(data1)
data2 <- inner_join(data,data1, by = "gen")
View(data2)
list1 <- list()
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
list1[[length(list1)+1]] = data2
}
path
names1
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[14])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
rm(data, data1, data2)
rm(c(data, data1, data2))
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[14])
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[14])
path
library(tidyverse)
names1 <- c("A","A2","ADICP","aNDForm","Ash","B","B1","B2","C","CP","ER6","kd","NDICP","SP")
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[14])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
names(list1) <- names1
View(list1)
View(list1[["A2"]])
View(list1)
View(list1[["Ash"]])
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
names(list1) <- names1
View(list1)
View(list1[["A2"]])
View(list1[["Ash"]])
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
data3 <- inner_join(data2 ,data3, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
data3 <- data.frame()
list1 <- list()
data3 <- data.frame()
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
data3 <- inner_join(data2 ,data3, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
View(data2)
data2 <- data2 %>% column_to_rownames("gen")
View(data2)
data3 <- inner_join(data2 ,data3, by = "gen")
data3 <- rbind(data3, data2)
data3 <- data.frame()
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
data2 <- data2 %>% column_to_rownames("gen")
data3 <- rbind(data3, data2)
# data3 <- inner_join(data2 ,data3, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
# data2 <- data2 %>% column_to_rownames("gen")
# data3 <- rbind(data3, data2)
# data3 <- inner_join(data2 ,data3, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
library(tidyverse)
names1 <- c("A","A2","ADICP","aNDForm","Ash","B","B1","B2","C","CP","ER6","kd","NDICP","SP")
list1 <- list()
for (i in 1:length(names1)) {
path <- paste0("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST2/",names1[i])
setwd(path)
data <- read.csv("predictions_2stage_ASReml_mrbean.csv")
data$trial <- paste0(data$trial, "_",names1[i])
data <- data %>% dplyr::select(1:3) %>% spread(key = trial, value = predicted.value)
data1 <- read.csv("Overall_predictions_2stage.csv")
data1 <- data1 %>% dplyr::select(1:2)
colnames(data1)[2] <- paste0("all_",names1[i])
data2 <- inner_join(data,data1, by = "gen")
# data2 <- data2 %>% column_to_rownames("gen")
# data3 <- rbind(data3, data2)
# data3 <- inner_join(data2 ,data3, by = "gen")
list1[[length(list1)+1]] = data2
rm(data, data1, data2)
}
names(list1) <- names1
data3 <- list1[[1]] %>%
inner_join(., list1[[2]], by = "gen") %>%
inner_join(., list1[[3]], by = "gen") %>%
inner_join(., list1[[4]], by = "gen") %>%
inner_join(., list1[[5]], by = "gen") %>%
inner_join(., list1[[6]], by = "gen") %>%
inner_join(., list1[[7]], by = "gen") %>%
inner_join(., list1[[8]], by = "gen") %>%
inner_join(., list1[[9]], by = "gen") %>%
inner_join(., list1[[10]], by = "gen") %>%
inner_join(., list1[[11]], by = "gen") %>%
inner_join(., list1[[12]], by = "gen") %>%
inner_join(., list1[[13]], by = "gen") %>%
inner_join(., list1[[14]], by = "gen")
View(data3)
PCA1 <- read.csv("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST/PCA.csv")
PCA1 <- read.csv("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST/PCA.csv")
data3 <- list1[[1]] %>%
inner_join(., list1[[2]], by = "gen") %>%
inner_join(., list1[[3]], by = "gen") %>%
inner_join(., list1[[4]], by = "gen") %>%
inner_join(., list1[[5]], by = "gen") %>%
inner_join(., list1[[6]], by = "gen") %>%
inner_join(., list1[[7]], by = "gen") %>%
inner_join(., list1[[8]], by = "gen") %>%
inner_join(., list1[[9]], by = "gen") %>%
inner_join(., list1[[10]], by = "gen") %>%
inner_join(., list1[[11]], by = "gen") %>%
inner_join(., list1[[12]], by = "gen") %>%
inner_join(., list1[[13]], by = "gen") %>%
inner_join(., list1[[14]], by = "gen") %>%
inner_join(., PCA1, by = "gen")
View(data3)
View(list1)
View(list1[["A"]])
# data 3
# 192 cols
# 1 gen
# 3 PCA
# 14 traits with 6 ST2_BLUPs (14 * 6)
14 * 6
View(data3)
write.csv(data3, "~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST/pheno_2.csv", quote = F, row.names = F)
pheno=read.csv("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST/pheno_2.csv")
View(pheno)
trait1 <- colnames(pheno)[2:85]
trait1
library(GWASpoly)
library(tidyverse)
pheno=read.csv("~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST/pheno_2.csv")
trait1 <- colnames(pheno)[2:85]
length(trait1)
models_1 <- c("general", "additive", "1-dom", "2-dom",  "diplo-additive", "diplo-general")
params <- set.params(fixed=c("PC1","PC2","PC3"),
fixed.type=rep("numeric",3), n.PC = 3)
data <- read.GWASpoly(ploidy=4,
pheno.file="~/Documents/git/Biodigestibility_Alfalfa/BLUEs_ST/pheno_2.csv",
geno.file="~/Documents/git/big_files/Norberg_2.txt",
format="numeric", n.traits=length(trait1), delim=",")
data_2 <- set.K(data = data, LOCO = T, n.core = 8)
data_3_st2 <- GWASpoly(data = data_2, models = models_1, traits = trait1, params = params, n.core = 8)
save(data_3_st2, file = "~/Documents/git/big_files/data_3_st2.RData")
data_5 <- set.threshold(data_3_st2, method= "Bonferroni", level=0.05)
QTL_01 <- get.QTL(data_5)
QTL_02 <- QTL_01 %>% distinct(Marker, .keep_all = T)
View(QTL_01)
View(QTL_02)
unique(QTL_01$Trait)
traits <- unique(QTL_01$Trait)
traits1 <- unique(QTL_01$Trait)
rm(traits)
manhattan.plot(data_5, traits = traits1) #repeat for each trait in trait1
View(QTL_01)
QTL_01 <- get.QTL(data_5)
write.csv(QTL_01, "~/Documents/git/Biodigestibility_Alfalfa/GWAS_results/QTL_01_ST2.csv", quote = F, row.names = F)
data_5@map$Chrom <- gsub("Chr", "", data_5@map$Chrom)
data_5@map$Chrom <- as.factor(data_5@map$Chrom)
QTL_01 <- get.QTL(data_5)
View(QTL_01)
traits1 <- unique(QTL_01$Trait)
traits1
p1 <- manhattan.plot(data = data_5, traits = traits1) + theme_classic(base_family = "Arial", base_size = 12) + scale_color_manual(values=c("royalblue2","gray70")) + theme(legend.position = "none", axis.title.y = element_text(size = 12), plot.tag = element_blank(), strip.background = element_blank())
ggsave(filename = "~/Documents/git/Biodigestibility_Alfalfa/GWAS_results/Manhattan_ST2.pdf", plot = p1, dpi = 300, width = 10, height = 6)
ggsave(filename = "~/Documents/git/Biodigestibility_Alfalfa/GWAS_results/Manhattan_ST2.jpg", plot = p1, dpi = 300, width = 10, height = 6)
